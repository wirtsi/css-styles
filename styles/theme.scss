$themes: (
  default: (
    bg: white,
    color: black,
    logo: url(../public/homer1.png),
  ),
  dark: (
    bg: linear-gradient(#000, #444),
    color: white,
    logo: url(../public/homer2.png),
  ),
);

$theme-map: ();

// we must use two different theming methods. One that works inside a 
// SCSS module and one for global styles
@mixin module-themify($themes: $themes) {
  @each $theme, $map in $themes {

    :global(.theme-#{$theme}) & { 
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }

      @content;
      $theme-map: null !global;
    }

  }
}

@mixin global-themify() {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

// silly lookup funtion to get values from $themes
@function t($key) {
  @return map-get($theme-map, $key);
}
